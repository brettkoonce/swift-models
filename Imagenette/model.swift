import TensorFlow

struct BasicCNNModel: Layer {
    var conv1a = Conv2D<Float>(filterShape: (3, 3, 3, 32), padding: .same, activation: relu)
    var conv1b = Conv2D<Float>(filterShape: (3, 3, 32, 32), activation: relu)
    var pool1 = MaxPool2D<Float>(poolSize: (2, 2), strides: (2, 2))
    var dropout1 = Dropout<Float>(probability: 0.25)
    var conv2a = Conv2D<Float>(filterShape: (3, 3, 32, 64), padding: .same, activation: relu)
    var conv2b = Conv2D<Float>(filterShape: (3, 3, 64, 64), activation: relu)
    var pool2 = MaxPool2D<Float>(poolSize: (2, 2), strides: (2, 2))
    var dropout2 = Dropout<Float>(probability: 0.25)
    var conv3a = Conv2D<Float>(filterShape: (3, 3, 64, 128), padding: .same, activation: relu)
    var conv3b = Conv2D<Float>(filterShape: (3, 3, 128, 128), activation: relu)
    var pool3 = MaxPool2D<Float>(poolSize: (2, 2), strides: (2, 2))
    var dropout3 = Dropout<Float>(probability: 0.25)
    var conv4a = Conv2D<Float>(filterShape: (3, 3, 128, 256), padding: .same, activation: relu)
    var conv4b = Conv2D<Float>(filterShape: (3, 3, 256, 256), activation: relu)
    var pool4 = MaxPool2D<Float>(poolSize: (2, 2), strides: (2, 2))
    var dropout4 = Dropout<Float>(probability: 0.25)
    var flatten = Flatten<Float>()
    var dense1 = Dense<Float>(inputSize: 9216, outputSize: 512, activation: relu)
    var dropout_final = Dropout<Float>(probability: 0.5)
    var dense2 = Dense<Float>(inputSize: 512, outputSize: 10, activation: identity)

    @differentiable(wrt: (self, input))
    public func applied(to input: Tensor<Float>, in context: Context) -> Tensor<Float> {
        var tmp = conv1a.applied(to: input, in: context)
        tmp = conv1b.applied(to: tmp, in: context)
        tmp = pool1.applied(to: tmp, in: context)
        tmp = dropout1.applied(to: tmp, in: context)
        tmp = conv2a.applied(to: tmp, in: context)
        tmp = conv2b.applied(to: tmp, in: context)
        tmp = pool2.applied(to: tmp, in: context)
        tmp = dropout2.applied(to: tmp, in: context)
        tmp = conv3a.applied(to: tmp, in: context)
        tmp = conv3b.applied(to: tmp, in: context)
        tmp = pool3.applied(to: tmp, in: context)
        tmp = dropout3.applied(to: tmp, in: context)
        tmp = conv4a.applied(to: tmp, in: context)
        tmp = conv4b.applied(to: tmp, in: context)
        tmp = pool4.applied(to: tmp, in: context)
        tmp = dropout4.applied(to: tmp, in: context)
        tmp = flatten.applied(to: tmp, in: context)
        tmp = dense1.applied(to: tmp, in: context)
        tmp = dropout_final.applied(to: tmp, in: context)
        return dense2.applied(to: tmp, in: context)
    }
}
